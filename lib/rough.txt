Expanded(
  flex: 3,
  child: Container(
    margin: const EdgeInsets.only(right: 16),
    padding: const EdgeInsets.all(24),
    decoration: BoxDecoration(
      color: Colors.white,
      borderRadius: BorderRadius.circular(16),
      boxShadow: [
        BoxShadow(
          color: Colors.black.withOpacity(0.05),
          blurRadius: 10,
          offset: const Offset(0, 4),
        ),
      ],
    ),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        /// Title
        Row(
          children: const [
            Icon(Icons.group, color: Colors.indigo),
            SizedBox(width: 8),
            Text(
              "Assigned Mentors",
              style: TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
        const SizedBox(height: 20),

        /// Mentor List
        Expanded(
          child: StreamBuilder<QuerySnapshot>(
            stream:
                FirebaseFirestore.instance.collection('mentors').snapshots(),
            builder: (context, snapshot) {
              if (!snapshot.hasData) {
                return const Center(child: CircularProgressIndicator());
              }

              final mentors = snapshot.data!.docs;
              if (mentors.isEmpty) {
                return const Center(
                  child: Text(
                    "No mentors added yet.",
                    style: TextStyle(fontSize: 16, color: Colors.grey),
                  ),
                );
              }

              return ListView.separated(
                itemCount: mentors.length,
                separatorBuilder: (_, __) => const SizedBox(height: 12),
                itemBuilder: (context, index) {
                  final data = mentors[index].data() as Map<String, dynamic>;
                  final assigned = data['assigned'] ?? [];

                  return Container(
                    padding: const EdgeInsets.symmetric(
                        horizontal: 16, vertical: 12),
                    decoration: BoxDecoration(
                      color: Colors.indigo.shade50,
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        /// Mentor Name + ID + Sections
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                data['name'] ?? '',
                                style: const TextStyle(
                                  fontWeight: FontWeight.w600,
                                  fontSize: 16,
                                ),
                              ),
                              const SizedBox(height: 4),
                              Text(
                                "User ID: ${data['userId'] ?? ''}",
                                style: const TextStyle(fontSize: 13),
                              ),
                              const SizedBox(height: 4),
                              Text(
                                "Assigned: ${assigned.map((e) => "${e['batch']} - ${e['section']}").join(", ")}",
                                style: const TextStyle(
                                  fontSize: 13,
                                  color: Colors.black87,
                                ),
                              ),
                            ],
                          ),
                        ),

                        /// Action buttons
                        Row(
                          children: [
                            IconButton(
                              icon: const Icon(Icons.edit, color: Colors.blue),
                              tooltip: "Edit Mentor",
                              onPressed: () {
                                _editMentor(data);
                              },
                            ),
                            IconButton(
                              icon: const Icon(Icons.delete, color: Colors.red),
                              tooltip: "Delete Mentor",
                              onPressed: () {
                                _deleteMentor(data);
                              },
                            ),
                          ],
                        )
                      ],
                    ),
                  );
                },
              );
            },
          ),
        ),
      ],
    ),
  ),
),


now we successfully completed the mentor assign in hod website , Now in hod website there a option called app login where the hod will set userid and password , then they can login in studentidcardscanner app , which is already connected to same firebase , but i dont know how to connect that process , and if in the hod website they delete the app username and password then it automatically Logout in app , no matter how many device used that login credentials . the uploaded image is hod applogin option , and present i need to create a app login page , So now i will provide the app full code files in txt format and also i will provide the ,
